%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
%\VignetteIndexEntry{A Common Database Interface (DBI)}
%\VignetteDepends{}
%\VignetteKeywords{Databases, Relational DBMS, MySQL, SQLite, Oracle, PostgreSQL}
%\VignettePackage{DBI}
\documentclass{article}
% $Id$

\usepackage{graphicx,times}
\usepackage[%
  bookmarks=true,
  colorlinks=true,
  backref=true,
  hyperfigures=true,
  pdfpagemode=UseOutlines,
  pdfauthor={R-Databases Special Interest Group (R-SIG-DB)},
  pdftitle={A Common Database Interface (DBI)},
  pdfkeywords={Databases, Relational DBMS, R, S-Plus, 
               PostgreSQL, MySQL, mSQL, Microsoft SQL Server, 
               Oracle, SQLite, Inter-system communications, 
               Distributed computing}
]{hyperref}

% R/S related commands
\newcommand{\sfun}[1]{\mbox{\tt #1()}}  % print arg as an R/S fun()
\newcommand{\sobj}[1]{\mbox{\tt #1}}    % print arg as an R/S object
\newcommand{\sexp}[1]{\mbox{\tt #1}}    % print arg as an R/S expression
\newcommand{\sclass}[1]{\mbox{\tt #1}}  % print arg as an R/S class
\newcommand{\smethod}[1]{\mbox{\tt #1}} % print arg as an R/S method
\begin{document}

\title{A Common Database Interface (DBI)}
\author{
R-Databases Special Interest Group\\
\href{mailto:r-sig-db@stat.math.ethz.ch}{r-sig-db@stat.math.ethz.ch}
}

\date{26 August 2002 (Updated 16 June 2003)}

\maketitle 
\tableofcontents

\begin{abstract}
This document describes a common interface between the S language 
(in its R and S-Plus implementations) and database management systems
(DBMS).  The interface defines a small set of classes and methods
similar in spirit to Perl's DBI, Java's JDBC, Python's DB-API,
and Microsoft's ODBC.
\end{abstract}

\section{Version}\label{sec:version}
This document describes version 0.1-6 of the database interface
API (application programming interface).

\section{Introduction}\label{sec:intro}

The database interface (DBI) separates the connectivity to the DBMS
into a ``front-end'' and a ``back-end''.  Applications use only the
exposed ``front-end'' API.  The facilities that communicate with
specific DBMS (Oracle, PostgreSQL, etc.) are provided by ``device
drivers'' that get invoked automatically by the S language evaluator.
The following example illustrates some of the DBI capabilities:
\begin{verbatim}
## Choose the proper DBMS driver and connect to the server

drv <- dbDriver("ODBC")
con <- dbConnect(drv, "dsn", "usr", "pwd")

## The interface can work at a higher level importing tables 
## as data.frames and exporting data.frames as DBMS tables.

dbListTables(con)
dbListFields(con, "quakes")
if(dbExistsTable(con, "new_results"))
   dbRemoveTable(con, "new_results")
dbWriteTable(con, "new_results", new.output)

## The interface allows lower-level interface to the DBMS
res <- dbSendQuery(con, paste(
            "SELECT g.id, g.mirror, g.diam, e.voltage",
            "FROM geom_table as g, elec_measures as e",
            "WHERE g.id = e.id and g.mirrortype = 'inside'",
            "ORDER BY g.diam"))
out <- NULL
while(!dbHasCompleted(res)){
   chunk <- fetch(res, n = 10000)
   out <- c(out, doit(chunk))
}

## Free up resources
dbClearResult(res)
dbDisconnect(con)
dbUnloadDriver(drv)
\end{verbatim}
(only the first 2 expressions are DBMS-specific -- all others are
independent of the database engine itself).

Individual DBI drivers need not implement all the features we
list below (we indicate those that are optional).  Furthermore,
drivers may extend the core DBI facilities, but we suggest to have
these extensions clearly indicated and documented.

The following are the elements of the DBI:
\begin{enumerate}
\item A set of classes and methods (Section~\ref{sec:DBIClasses})
  that defines what operations are possible and how they are defined, 
  e.g.:
  \begin{itemize}
  \item connect/disconnect to the DBMS
  \item create and execute statements in the DBMS
  \item extract results/output from statements
  \item error/exception handling
  \item information (meta-data) from database objects
  \item transaction management (optional)
  \end{itemize}

  Some things are left explicitly unspecified, e.g., authentication
  and even the query language, although it is hard to avoid references 
  to SQL and relational database management systems (RDBMS).

\item Drivers
  
  Drivers are collection of functions that implement the functionality
  defined above in the context of specific DBMS, e.g., mSQL, Informix.

\item Data type mappings (Section~\ref{sec:data-mappings}.)
  
  Mappings and conversions between DBMS data types and R/S objects.
  All drivers should implement the ``basic'' primitives (see below), 
  but may chose to add user-defined conversion function to handle
  more generic objects (e.g., factors, ordered factors, time series,
  arrays, images).

\item Utilities (Section~\ref{sec:utilities}.)
  
  These facilities help with details such as mapping of identifiers
  between S and DBMS (e.g., \texttt{"\_"} is illegal in R/S
  names, and \texttt{"."} is used for constructing compound SQL
  identifiers), etc.

\end{enumerate}

\section{DBI Classes and Methods}\label{sec:DBIClasses}
The following are the main DBI classes. They need to be extended
by individual database back-ends (Sybase, Oracle, etc.)  Individual
drivers need to provide methods for the generic functions listed here
(those methods that are optional are so indicated).

\emph{Note: Although R releases prior to 1.4 do not have a formal
concept of classes, we will use the syntax of the S Version
4 classes and methods (available in R releases 1.4 and later as
library \sobj{methods}) to convey precisely the DBI class hierarchy,
its methods, and intended behavior.  
}

The DBI classes are \sclass{DBIObject}, \sclass{DBIDriver},
\sclass{DBIConnection} and \sclass{DBIResult}. All these are
\emph{virtual} classes.  Drivers define new classes that extend
these, e.g., \sclass{PgSQLDriver}, \sclass{PgSQLConnection}, and
so on.
\begin{figure}
\includegraphics[width=\textwidth]{figure1}
\caption{Class hierarchy for the DBI. The top two layers
are comprised of virtual classes and each lower layer represents
a set of driver-specific implementation classes that provide
the functionality defined by the virtual classes above.}
\end{figure}
\begin{description}
\item[\sclass{DBIObject}:]
  Virtual class\footnote{A virtual class allows us to group
  classes that share some common characteristics, even if their
  implementations are radically different.} that groups all other
  DBI classes.

\item[\sclass{DBIDriver}:]
  Virtual class that groups all DBMS drivers. Each DBMS driver
  extends this class.  Typically generator functions instantiate
  the actual driver objects, e.g., \sfun{PgSQL}, \sfun{HDF5}, 
  \sfun{BerkeleyDB}.

\item[\sclass{DBIConnection}:]
  Virtual class that encapsulates connections to DBMS.

\item[\sclass{DBIResult}:]
  Virtual class that describes the result of a DBMS query or statement.  

  [Q: Should we distinguish between a simple result of DBMS statements 
  e.g., as \texttt{delete} from DBMS queries (i.e., those that generate 
  data).]

\end{description} 

The methods \smethod{format}, \smethod{print}, \smethod{show}, 
\smethod{dbGetInfo}, and \smethod{summary}
are defined (and \emph{implemented} in the \sobj{DBI} package) 
for the \sclass{DBIObject} base class, thus available to all 
implementations; individual drivers, however, are free to override 
them as they see fit.
\begin{description} 
\item[\smethod{format(x, ...)}:]
   produces a concise character representation (label) for the
   \sclass{DBIObject} \sobj{x}.

\item[\smethod{print(x, ...)}/\smethod{show(x)}:]
  prints a one-line identification of the object \sobj{x}.

\item[\smethod{summary(object, ...)}:]
  produces a concise description of the object.
  The default method for \sclass{DBIObject} simply 
  invokes \sexp{dbGetInfo(dbObj)} and prints the name-value
  pairs one per line.  Individual implementations may tailor
  this appropriately.

\item[\smethod{dbGetInfo(dbObj, ...)}:]
  extracts information (meta-data) relevant for the
  \sclass{DBIObject} \sobj{dbObj}.  It may return a list
  of key/value pairs, individual meta-data if supplied
  in the call, or \sobj{NULL} if the requested meta-data
  is not available.

  \emph{Hint:} Driver implementations may choose to allow an 
  argument \sobj{what} to specify individual meta-data,  e.g., 
  \sexp{dbGetInfo(drv, what = "max.connections")}.

\end{description}

In the next few sub-sections we describe in detail each of these
classes and their methods.

\subsection{Class \sclass{DBIObject}}\label{sec:DBIObject}
This class simply groups all DBI classes, and thus all extend it.

\subsection{Class \sclass{DBIDriver}}\label{sec:DBIDriver}
This class identifies the database management system. It needs to 
be extended by individual back-ends (Oracle, PostgreSQL, etc.)

The DBI provides the generator \sexp{dbDriver("driverName")} 
which simply invokes the function \sfun{driverName}, which
in turn instantiates the corresponding driver object.

The \sclass{DBIDriver} class defines the following methods:
\begin{description}

\item[\sfun{driverName}:]\label{meth:driverName}
  initializes the driver code. The name \sobj{driverName} refers to
  the actual generator function for the DBMS, e.g., \sfun{RPgSQL},
  \sfun{RODBC}, \sfun{HDF5}.  The driver instance object is used
  with \smethod{dbConnect} (see page~\pageref{meth:dbConnect})
  for opening one or possibly more connections to one or more DBMS.

\item[\smethod{dbListConnections(drv, ...)}:]
  list of current connections being handled by the \sobj{drv}
  driver.  May be \sobj{NULL} if there are no open connections.
  Drivers that do not support multiple connections may return the
  one open connection.

\item[\smethod{dbGetInfo(dbObj, ...)}:]
  returns a list of name-value pairs of information about the
  driver.  

  \emph{Hint:} Useful entries could include 
  \begin{description}
  \item[\sobj{name}:] the driver name (e.g., \sexp{"RODBC"}, \sexp{"RPgSQL"}); 
  \item[\sobj{driver.version}:] version of the driver;
  \item[\sobj{DBI.version}:] the version of the DBI that the driver 
   implements, e.g., \sexp{"0.1-2"};
  \item[\sobj{client.version}:] of the client DBMS libraries (e.g., version
  of the \texttt{libpq} library in the case of \sobj{RPgSQL});
  \item[\sobj{max.connections}:] maximum number of simultaneous 
  connections; 
  \end{description}
  plus any other relevant information about the implementation, for instance, 
  how the driver handles upper/lower case in identifiers.

\item[\smethod{dbUnloadDriver("driverName")} (optional):]
  frees all resources (local and remote) used by the driver.  
  Returns a logical to indicate if it succeeded or not.
 
\end{description}

\subsection{Class \sclass{DBIConnection}}\label{sec:DBIConnection}
This virtual class encapsulates the connection to a DBMS, and
it provides access to dynamic queries, result sets, DBMS session
management (transactions), etc.

\emph{Note:} Individual drivers are free to implement single or
multiple simultaneous connections.

The methods defined by the \sclass{DBIConnection} class include:
\begin{description}
\item[\smethod{dbConnect(drv, ...)}:]\label{meth:dbConnect}
  creates and opens a connection to the database implemented by the
  driver \sobj{drv} (see Section~\ref{sec:DBIDriver}).  Each driver will
  define what other arguments are required, e.g., \sobj{"dbname"} or
  \sobj{"dsn"} for the database name, \sobj{"user"}, and \sobj{"password"}.
  It returns an object that extends \sclass{DBIConnection} in a
  driver-specific manner (e.g., the MySQL implementation could
  create an object of class \sclass{MySQLConnection} that extends 
  \sclass{DBIConnection}).

\item[\smethod{dbDisconnect(conn, ...)}:]
  closes the connection, discards all pending work, and frees
  resources (e.g., memory, sockets).  Returns a logical indicating
  whether it succeeded or not.

\item[\smethod{dbSendQuery(conn, statement, ...)}:]
  submits one statement to the DBMS.  It returns a \sclass{DBIResult}
  object. This object is needed for fetching data in case
  the statement generates output (see \smethod{fetch} on
  page~\pageref{meth:fetch}), and it may be used for querying the
  state of the operation; see \smethod{dbGetInfo} and other 
  meta-data methods on page~\pageref{meth:res-others}.

\item[\smethod{dbGetQuery(conn, statement, ...)}:]
  submit, execute, and extract output in one operation.
  The resulting object may be a \sclass{data.frame} if
  the \sobj{statement} generates output.  Otherwise the
  return value  should be a logical indicating whether
  the query succeeded or not.

\item[\smethod{dbGetException(conn, ...)}:]
  returns a list with elements \sobj{errNum} and \sobj{errMsg}
  with the status of the last DBMS statement sent on a given
  connection (this information may also be provided by the
  \sfun{dbGetInfo} meta-data function on the \sobj{conn} object.

  \emph{Hint:} The ANSI SQL-92 defines both a status code and an
  status message that could be return as members of the list.

\item[\smethod{dbGetInfo(dbObj, ...)}:]
  returns a list of name-value pairs describing the state of the
  connection;  it may return one or more meta-data, the actual driver
  method allows to specify individual pieces of meta-data (e.g., 
  maximum number of open results/cursors).

  \emph{Hint:} Useful entries could include 
  \begin{description} 
  \item[\sobj{dbname}:] the name of the database in use; 
  \item[\sobj{db.version}:] the DBMS server version (e.g., 
  "Oracle 8.1.7 on Solaris"; 
  \item[\sobj{host}:] host where the database server resides; 
  \item[\sobj{user}:] user name;
  \item[\sobj{password}:] password (is this safe?);
  \end{description}
  plus any other arguments related to the connection (e.g., thread id,
  socket or TCP connection type).

\item[\smethod{dbListResults(conn, ...)}:]
  list of \sobj{DBIResult} objects currently active on the connection
  \sobj{conn}.  May be \sobj{NULL} if no result set is active
  on \sobj{conn}.  Drivers that implement only one result set per
  connection could return that one object (no need to wrap it in
  a list).

\end{description}

\emph{Note: The following are convenience methods that simplify
  the import/export of (mainly) data.frames.  The first five
  methods implement the core methods needed to \sfun{attach}
  remote DBMS to the S search path. (For details, see
  \cite{data-management:1991,database-classes:1999}.)
}

\emph{Hint:} For relational DBMS these methods may be easily implemented 
  using the core DBI methods \smethod{dbConnect}, \smethod{dbSendQuery}, 
  and \smethod{fetch}, due to SQL reflectance (i.e., one easily gets
  this meta-data by querying the appropriate tables on the RDBMS).

\begin{description}
\item[\smethod{dbListTables(conn, ...)}:]
  returns a character vector (possibly of zero-length) of object (table) 
  names available on the \sobj{conn} connection.

\item[\smethod{dbReadTable(conn, name, ...)}:]
  imports the data stored remotely in the table \sobj{name}
  on connection \sobj{conn}. Use the field \sobj{row.names} 
  as the \sexp{row.names} attribute of the output data.frame.
  Returns a \sclass{data.frame}.

  [Q: should we spell out how row.names should be created? E.g.,
  use a field (with unique values) as row.names?  Also, should
  \smethod{dbReadTable} reproduce a data.frame exported with
  \smethod{dbWriteTable}?]

\item[\smethod{dbWriteTable(conn, name, value, ...)}:]
  write the object \sobj{value} (perhaps after coercing it to 
  data.frame) into the remote object \sobj{name} in connection
  \sobj{conn}.  Returns a logical indicating whether the operation
  succeeded or not.

\item[\smethod{dbExistsTable(conn, name, ...)}:]
  does remote object \sobj{name} exist on \sobj{conn}?
  Returns a logical.

\item[\smethod{dbRemoveTable(conn, name, ...)}:]
  removes remote object \sobj{name} on connection \sobj{conn}.
  Returns a logical indicating whether the operation succeeded or not.

\item[\smethod{dbListFields(conn, name, ...)}:] returns a character vector
listing the field names of the remote table \sobj{name} on connection
\sobj{conn} (see \smethod{dbColumnInfo()} for extracting data type 
on a table).

\end{description}

\emph{Note: The following methods deal with transactions and 
   stored procedures. All these functions are optional.
}
\begin{description}
\item[\smethod{dbCommit(conn, ...)}(optional):]
  commits pending transaction on the connection and returns 
  \sobj{TRUE} or \sobj{FALSE} depending on whether the operation
  succeeded or not.

\item[\smethod{dbRollback(conn, ...)}(optional):]
  undoes current transaction on the connection and returns
  \sobj{TRUE} or \sobj{FALSE} depending on whether the operation
  succeeded or not.

\item[\smethod{dbCallProc(conn, storedProc, ...)}(optional):]
  invokes a stored procedure in the DBMS and returns a \sclass{DBIResult} 
  object.

  [Stored procedures are \emph{not} part of the ANSI SQL-92 standard and
  vary substantially from one RDBMS to another.]

\end{description}

\subsection{Class \sclass{DBIResult}}\label{sec:DBIResult}

This virtual class describes the result and state of execution of
a DBMS statement (any statement, query or non-query).  The result set
\sobj{res} keeps track of whether the statement produces output
for R/S, how many rows were affected by the operation, how many
rows have been fetched (if statement is a query), whether there
are more rows to fetch, etc.  

\emph{Note: Individual drivers are free to allow single or multiple
active results per connection.
}

[Q: Should we distinguish between results that return no data from those
that return data?]

The class \sclass{DBIResult} defines the following methods:
\begin{description}
\item[\smethod{fetch(res, n, ...)}:]\label{meth:fetch}
  fetches the next \sobj{n} elements (rows) from the result set
  \sobj{res} and return them as a data.frame.  A value of \sexp{n=-1}
  is interpreted as ``return all elements/rows''.

\item[\smethod{dbClearResult(res, ...)}:]
  flushes any pending data and frees all resources (local and
  remote) used by the object \sobj{res} on both sides of the
  connection. Returns a logical indicating success or not.

\item[\smethod{dbGetInfo(dbObj, ...)}:]
   returns a name-value list with the state of the result set.

   \emph{Hint:} Useful entries could include
   \begin{description}
   \item[\sobj{statement}:] a character string representation of the
   statement being executed;
   \item[\sobj{rows.affected}:] number of affected records (changed, 
   deleted, inserted, or extracted);
   \item[\sobj{row.count}:] number of rows fetched so far;
   \item[\sobj{has.completed}:] has the statement (query) finished?
   \item[\sobj{is.select}:] a logical describing whether or not the
   statement generates output;
   \end{description}
   plus any other relevant driver-specific meta-data.

\item[\smethod{dbColumnInfo(res, ...)}:]
   produces a data.frame that describes the output of a query. 
   The data.frame should have as many rows as there are output
   fields in the result set, and each column in the data.frame
   should describe an aspect of the result set field (field name,
   type, etc.)
 
   \emph{Hint:} The data.frame columns could include 
   \begin{description}
   \item[\sobj{field.name}:] DBMS field label;
   \item[\sobj{field.type}:] DBMS field type (implementation-specific);
   \item[\sobj{data.type}:] corresponding R/S data type, e.g., 
   \sexp{"integer"};
   \item[\sobj{precision}/\sobj{scale}:] (as in ODBC terminology),  
   display width and number of decimal digits, respectively;
   \item[\sobj{nullable}:] whether the corresponding field may contain
   (DBMS) \texttt{NULL} values;
   \end{description}
   plus other driver-specific information.

\item[\smethod{dbSetDataMappings(flds, ...)}(optional):] 
  defines a conversion between internal DBMS data types
  and R/S classes.  We expect the default mappings (see
  Section~\ref{sec:data-mappings}) to be by far the most
  common ones, but users that need more control may specify
  a class generator for individual fields in the result set.
  [This topic needs further discussion.]

\end{description}

\emph{Note: The following are convenience methods that extract
information from the result object (they may be implemented
by invoking \sfun{dbGetInfo} with appropriate arguments).  
}

\begin{description}\label{meth:res-others}
\item[\smethod{dbGetStatement(res, ...)}(optional):]
  returns the DBMS statement (as a character string) associated
  with the result \sobj{res}.

\item[\smethod{dbGetRowsAffected(res, ...)}(optional):]
  returns the number of rows affected by the executed statement
  (number of records deleted, modified, extracted, etc.)

\item[\smethod{dbHasCompleted(res, ...)}(optional):] 
  returns a logical that indicates whether the operation has been
  completed (e.g., are there more records to be fetched?).

\item[\smethod{dbGetRowCount(res, ...)}(optional):]
  returns the number of rows fetched so far.

\end{description}

\section{Data Type Mappings}\label{sec:data-mappings}
The data types supported by databases are different than the
data types in R and S, but the mapping between the ``primitive''
types is straightforward:  Any of the many fixed and varying
length character types are mapped to R/S \sobj{"character"}.
Fixed-precision (non-IEEE) numbers are mapped into either doubles
(\sobj{"numeric"}) or long (\sobj{"integer"}). Notice that many
DBMS do not follow the so-called IEEE arithmetic, so there are
potential problems with under/overflows and loss of precision, but
given the R/S primitive types we cannot do too much but identify
these situations and warn the application (how?).

By default dates and date-time objects are mapped to character
using the appropriate \texttt{TO\_CHAR} function in the DBMS
(which should take care of any locale information).  Some RDBMS
support the type \texttt{CURRENCY} or \texttt{MONEY} which should be
mapped to \sobj{"numeric"} (again with potential round off errors).
Large objects (character, binary, file, etc.) also need to be mapped.
User-defined functions may be specified to do the actual conversion
(as has been done in other inter-systems packages \footnote{
  Duncan Temple Lang has volunteered to port the data conversion 
  code found in R-Jave, R-Perl, and R-Python packages to the DBI}).

Specifying user-defined conversion functions still needs to be 
defined.

\section{Utilities}\label{sec:utilities}
The core DBI implementation should make available to all
drivers some common basic utilities.  For instance:
\begin{description}
\item[\smethod{dbGetDBIVersion}:]
  returns the version of the currently attached DBI as a string.

\item[\smethod{dbDataType(dbObj, obj, ...)}:]
  returns a string with the (approximately) appropriate data type for
  the R/S object \sobj{obj}.  The DBI can implement this following
  the ANSI-92 standard, but individual drivers may want/need to extend
  it to make use of DBMS-specific types.

\item[\smethod{make.db.names(dbObj, snames, ...)}:]
  maps R/S names (identifiers) to SQL identifiers replacing 
  illegal characters (as \sobj{"."}) by the legal SQL \sobj{"\_"}.

\item[\sobj{SQLKeywords(dbObj, ...)}:]
  returns a character vector of SQL keywords (reserved words).  
  The default method returns the list of \sobj{.SQL92Keywords},
  but drivers should update this vector with the DBMS-specific
  additional reserved words.

\item[\smethod{isSQLKeyword(dbObj, name, ...)}:]
  for each element in the character vector \sobj{name} determine 
  whether or not it is an SQL keyword, as reported by the 
  generic function \smethod{SQLKeywords}.  Returns a logical vector
  parallel to the input object \sobj{name}.

\end{description}

\section{Open Issues and Limitations}\label{sec:open-issues}
There are a number of issues and limitations that the current
DBI conscientiously does not address on the interest of simplicity.
We do list here the most important ones.
\begin{description}
\item[Non-SQL:]
  Is it realistic to attempt to encompass non-relational databases,
  like HDF5, Berkeley DB, etc.?

\item[Security:] 
  allowing users to specify their passwords on R/S scripts may
  be unacceptable for some applications.  We need to consider
  alternatives where users could store authentication on files
  (perhaps similar to ODBC's \texttt{odbc.ini}) with more stringent 
  permissions.

\item[Exceptions:]
  the exception mechanism is a bit too simple, and it does not
  provide for information when problems stem from the DBMS
  interface itself.  For instance, under/overflow or loss of
  precision as we move numeric data from DBMS to the more limited
  primitives in R/S.

\item[Asynchronous communication:]
  most DBMS support both synchronous and asynchronous communications,
  allowing applications to submit a query and proceed while
  the database server process the query. The application is then
  notified (or it may need to poll the server) when the query has completed.
  For large computations, this could be very useful, but the DBI
  would need to specify how to interrupt the server (if necessary)
  plus other details.  Also, some DBMS require applications to use
  threads to implement asynchronous communication, something that
  neither R nor S-Plus currently addresses.

\item[SQL scripts:]
  the DBI only defines how to execute one SQL statement at a time, 
  forcing users to split SQL scripts into individual statements.
  We need a mechanism by which users can submit SQL scripts that
  could possibly generate multiple result sets;  in this case we 
  may need to introduce new methods to loop over multiple results
  (similar to Python's \texttt{nextResultSet}).

\item[BLOBS/CLOBS:]
  large objects (both character and binary) present some challenges both
  to R and S-Plus.  It is becoming more common to store images, sounds,
  and other data types as binary objects in DBMS, some of which can
  be in principle quite large. The SQL-92 ANSI standard allows up
  to 2 gigabytes for some of these objects.  We need to carefully
  plan how to deal with binary objects.
  
\item[Transactions:]
  transaction management is not fully described.

\item[Additional methods:]
  Do we need any additional methods? (e.g., \sexp{dbListDatabases(conn)},
  \sexp{dbListTableIndices(conn, name)}, 
  how do we list all available drivers?)

\item[Bind variables:]
  the interface is heavily biased towards queries, as opposed to
  general purpose database development.  In particular we made
  no attempt to define ``bind variables''; this is a mechanism
  by which the contents of R/S objects are implicitly moved to
  the database during SQL execution.  For instance, the following
  embedded SQL statement

\begin{verbatim}
  /* SQL */
  SELECT * from emp_table where emp_id = :sampleEmployee
\end{verbatim}
  would take the vector \sobj{sampleEmployee} and iterate over each
  of its elements to get the result.  Perhaps the DBI could at some
  point in the future implement this feature.

\end{description}

\section{Resources}\label{sec:resources}
The idea of a common interface to databases has been successfully
implemented in various environments, for instance:

Java's Database Connectivity (JDBC)
(\href{http://www.javasoft.com/products/jdbc/index.html}{www.javasoft.com}).

In C through the Open Database Connectivity (ODBC)
(\href{http://www.genix.net/unixODBC}{www.genix.net/unixODBC}).

Python's Database Application Programming Interface
(\href{http://www.python.org/topics/database}{www.python.org}).

Perl's Database Interface
(\href{http://dbi.perl.org}{dbi.perl.org}).

\nocite{*}
\bibliography{biblio}
\bibliographystyle{plain}
\end{document}
